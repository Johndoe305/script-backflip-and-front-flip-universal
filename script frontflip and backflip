local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

humanoid.JumpPower = 60
local forwardBoost = 20

-- Mensagem inicial
local hint = Instance.new("Hint")
hint.Text = "Script executado com sucesso! Toque no bot√£o para dar flip."
hint.Parent = game.Workspace
task.wait(3)
hint:Destroy()

local function performFlip(direction)
    local lookVector = camera.CFrame.LookVector
    lookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
    local initialCFrame = rootPart.CFrame
    local jumpVelocity
    
    if direction == "front" then
        jumpVelocity = Vector3.new(lookVector.X * forwardBoost, humanoid.JumpPower, lookVector.Z * forwardBoost)
    elseif direction == "back" then
        jumpVelocity = Vector3.new(-lookVector.X * forwardBoost, humanoid.JumpPower, -lookVector.Z * forwardBoost)
    else
        return
    end
    
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    rootPart.Velocity = jumpVelocity

    local flipDuration = 0.6
    local startTime = tick()

    local connection
    connection = RunService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        if elapsed < flipDuration then
            local progress = elapsed / flipDuration
            local rotationAngle = 360 * progress
            local angleRad = math.rad(rotationAngle)
            local rotation
            
            if direction == "front" then
                rotation = CFrame.Angles(angleRad, 0, 0)
            else -- backflip
                rotation = CFrame.Angles(-angleRad, 0, 0)
            end
            
            rootPart.CFrame = CFrame.new(rootPart.Position) * (initialCFrame.Rotation * rotation)
        else
            connection:Disconnect()
            local pos = rootPart.Position
            local lookAt = pos + (direction == "front" and camera.CFrame.LookVector or -camera.CFrame.LookVector)
            rootPart.CFrame = CFrame.new(pos, lookAt)
            rootPart.Velocity = Vector3.new(0, rootPart.Velocity.Y, 0)
        end
    end)
end

local screenGui = Instance.new("ScreenGui", game.CoreGui)
screenGui.Name = "FlipGui"

local function createDraggableButton(text, position, flipDirection)
    local frame = Instance.new("Frame", screenGui)
    frame.Size = UDim2.new(0, 140, 0, 60)
    frame.Position = position
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BackgroundTransparency = 0.2
    frame.BorderSizePixel = 0
    frame.Active = true

    local button = Instance.new("TextButton", frame)
    button.Size = UDim2.new(0.9, 0, 0.7, 0)
    button.Position = UDim2.new(0.05, 0, 0.15, 0)
    button.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    button.Text = text
    button.TextColor3 = Color3.new(1, 1, 1)
    button.TextScaled = true
    button.Font = Enum.Font.GothamBold
    button.AutoButtonColor = true

    button.MouseButton1Click:Connect(function()
        performFlip(flipDirection)
    end)

    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

createDraggableButton("Front Flip", UDim2.new(0.4, -70, 0.7, 0), "front")
createDraggableButton("Back Flip", UDim2.new(0.6, -70, 0.7, 0), "back")
